--- clang-3.6/lib/CodeGen/CGExpr.cpp	2015-01-14 03:29:14.000000000 -0800
+++ llvm-3.6/tools/clang/lib/CodeGen/CGExpr.cpp	2018-03-02 13:37:33.819528195 -0800
@@ -2263,6 +2263,23 @@
   }
 }
 
+static bool checkNameAFLEdgeSanitizer(StringRef CheckName) {
+    std::string name = CheckName.str();
+    
+    bool ret = name.compare("add_overflow") == 0
+        || name.compare("sub_overflow") == 0
+        || name.compare("mul_overflow") == 0
+        || name.compare("negate_overflow") == 0
+        || name.compare("divrem_overflow") == 0
+        || name.compare("shift_out_of_bounds") == 0
+        || name.compare("load_invalid_value") == 0
+        || name.compare("out_of_bounds") == 0;
+    return ret;
+}
+
+
+
+
 void CodeGenFunction::EmitCheck(
     ArrayRef<std::pair<llvm::Value *, SanitizerKind>> Checked,
     StringRef CheckName, ArrayRef<llvm::Constant *> StaticArgs,
@@ -2310,6 +2327,12 @@
   llvm::BasicBlock *Cont = createBasicBlock("cont");
   llvm::BasicBlock *Handlers = createBasicBlock("handler." + CheckName);
   llvm::Instruction *Branch = Builder.CreateCondBr(JointCond, Cont, Handlers);
+
+  // fuzzer_edge_sanitizer
+  if (checkNameAFLEdgeSanitizer(CheckName)) {
+      Branch->setMetadata("afl_edge_sanitizer",
+                          llvm::MDNode::get(CGM.getLLVMContext(), None));
+  }
   // Give hint that we very much don't expect to execute the handler
   // Value chosen to match UR_NONTAKEN_WEIGHT, see BranchProbabilityInfo.cpp
   llvm::MDBuilder MDHelper(getLLVMContext());
