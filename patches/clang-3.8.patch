--- llvm-3.8/tools/clang/lib/CodeGen/CGExpr.cpp	2016-01-12 17:52:39.000000000 -0800
+++ llvm-3.8/tools/clang/lib/CodeGen/CGExpr.cpp.new	2020-09-14 23:12:07.543686560 -0700
@@ -2429,6 +2429,22 @@
   }
 }
 
+static bool checkNameAFLEdgeSanitizer(StringRef CheckName) {
+    std::string name = CheckName.str();
+    
+    bool ret = name.compare("add_overflow") == 0
+        || name.compare("sub_overflow") == 0
+        || name.compare("mul_overflow") == 0
+        || name.compare("negate_overflow") == 0
+        || name.compare("divrem_overflow") == 0
+        || name.compare("shift_out_of_bounds") == 0
+        || name.compare("load_invalid_value") == 0
+        || name.compare("out_of_bounds") == 0;
+    return ret;
+}
+
+
+
 void CodeGenFunction::EmitCheck(
     ArrayRef<std::pair<llvm::Value *, SanitizerMask>> Checked,
     StringRef CheckName, ArrayRef<llvm::Constant *> StaticArgs,
@@ -2476,6 +2492,14 @@
   llvm::BasicBlock *Cont = createBasicBlock("cont");
   llvm::BasicBlock *Handlers = createBasicBlock("handler." + CheckName);
   llvm::Instruction *Branch = Builder.CreateCondBr(JointCond, Cont, Handlers);
+  
+  // fuzzer_edge_sanitizer
+  if (checkNameAFLEdgeSanitizer(CheckName)) {
+      Branch->setMetadata("afl_edge_sanitizer",
+                          llvm::MDNode::get(CGM.getLLVMContext(), None));
+  }
+
+
   // Give hint that we very much don't expect to execute the handler
   // Value chosen to match UR_NONTAKEN_WEIGHT, see BranchProbabilityInfo.cpp
   llvm::MDBuilder MDHelper(getLLVMContext());
